
#ifdef VERTEX                            
                                             
attribute vec3 a_Position;                 
attribute vec2 a_TexCoord;                 
attribute vec3 a_Normal;                    
                                             
uniform mat4 u_Projection;                    
uniform mat4 u_Model;                       
uniform mat4 view;
                                            
varying vec3 v_Normal;                      
varying vec2 v_TexCoord;                     
                                              
void main()                                
{                                            
  gl_Position = u_Projection * view *               
    u_Model * vec4(a_Position, 1);           
                                             
  v_Normal = a_Normal;                       
  v_TexCoord = a_TexCoord;                   
}                                            
                                             
#endif                                      
#ifdef FRAGMENT                            
                                           
uniform sampler2D u_Texture;                  
                                            
varying vec3 v_Normal;                       
varying vec2 v_TexCoord;  
varying vec3 worldPosition;

uniform vec3 camPos;

uniform vec3 albedo;
uniform float metallic;
uniform float roughness;
uniform float ao;

uniform vec3 lightPos[4];
uniform vec3 lightColours[4];

const float PI = 3.14159265359;             

vec3 fresnelSchlick(float cosTheta, vec3 F0);
float DistributionGGX(vec3 N, vec3 H, float roughness);
float GeometrySchlickGGX(float NdotV, float roughness);
float   GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness);

                                        
void main()                                   
{
	vec3 N = normalize(v_Normal);
	vec3 V = normalize(camPos - worldPosition);    
	
	vec3 Lo = vec3(0.0);
	vec3 F0 = vec3(0.04);
	F0 = mix(F0,albedo,metallic);
	for (int i = 0; i < 4; i++)
	{
		vec3 L = normalize(lightPos[i] - worldPosition);
		vec3 H = normalize(V + L);
		float distance = length(lightPos[i] - worldPosition);
		float attenuation = 1.0 / (distance*distance);
		vec3 radiance = lightColours[i] * attenuation;
		vec3 F = fresnelSchlick(max(dot(H,V), 0.0),F0);

		float NDF = DistributionGGX(N,H, roughness);
		float G = GeometrySmith(N,V,L, roughness);

		vec3 numerator = NDF * G * F;
		float denominator = 4.0 * max(dot(N,V),0.0)*max(dot(N,L),0.0);
		vec3 specular = numerator / max(denominator, 0.001);

		vec3 kS = F;
		vec3 kD = vec3(1.0) - kS;
		kD += 1.0 - metallic;

		float NdotL = max(dot(N,L), 0.0);
		Lo += (kD * albedo / PI + specular) *radiance * NdotL;

	}
  
	vec3 ambient = vec3(0.03)*albedo*ao;
	vec3 colour = ambient + Lo;

	colour = colour / (colour + vec3(1.0));
	colour = pow(colour, vec3(1.0/2.2));
	                            
	gl_FragColor = texture2D(u_Texture, v_TexCoord);     
	//if(gl_FragColor.x == 9) gl_FragColor.x = v_Normal.x; 
}    
 
vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
	return F0 + (1.0 - F0) * pow (1.0 - cosTheta, 5.0);
}      

float DistributionGGX(vec3 N, vec3 H, float roughness)
{
	float a = roughness*roughness;
	float a2 = a*a;
	float NdotH = max(dot(N,H),0.0);
	float NdotH2 = NdotH*NdotH;

	float num = a2;
	float denom = (NdotH2 * (a2 - 1.0) + 1.0);
	denom = PI * denom * denom;
	
	return num/denom;
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
	float r = (roughness + 1.0);
	float k = (r*r)/8.0;
	float num = NdotV;
	float denom = NdotV * (1.0-k)+k;
	
	return num/denom;
}

float   GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
	float NdotV = max(dot(N,V), 0.0);
	float NdotL = max(dot(N,L), 0.0);
	float ggx2 = GeometrySchlickGGX(NdotV, roughness);
	float ggx1 = GeometrySchlickGGX(NdotL, roughness);

	return ggx1 * ggx2;
}
                              
                                            
#endif                                       